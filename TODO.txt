TODO List for Vecternary
------------------------

(FYI This list is temporary and overwritable, most items will be moved to Emacs in the permanent tasklist @ Vecternary-Tasklist.org instead)

- DONE Package and send the desktop app (with the default illustration/demo file) soon
- DONE Write the file specification for the .vect format and for Vecternary to efficiently load/save files
- DONE For performance - when Vecternary first loads files it will load them as static non-editable, and it will only change the canvas to be editable once the canvas is already loaded
- DONE Completely overhaul Vecternary UI paradigm!
	- DONE There should in fact be a separate "select tool" available for adjusting the position of objects instead of the weird "adjust mode" to move stuff method!
	- DONE Instead of "adjust mode" and "draw mode" which are vaguely defined, instead it should be separated into tool settings and object settings!
	- DONE So for instance if the "draw tool" is selected, the tool settings define the type of brush used, brush thickness, stroke thickness, etc, while the object settings define the color of the object.
- DONE Finish seperating the markup to UI components in JavaScript
	- DONE Learn how to do UI component transitions on that codepen
	- DONE Separate these UI components:
		- DONE Menu bar
		- DONE Sidebar
		- DONE Dropdowns
	- DONE Make sure that the UI components retain good performance
	- DONE Also make sure that enough basic HTML markup remains to make the UI work even without JS enabled
	- DONE Update the tailwind.config.js file to include tree-shaking styles from all JS files
	- DONE Make sure that all the code is ES2015 compliant and works with just a <script> tag

- Standard todos:
	- DONE Work on fixing the multiselect color bug with the new multiselect attribute UI, adding autosaving, and the new rewrite to a state-based UI engine and the full width canvas with a floating left toolbar
	- DONE Add in a zoom index showing the percent of canvas zoom and updating realtime (e.g. 100%, 150%, etc.) at the bottom status bar
	- DONE Also work on adding the draggables and making the UI fully responsive
	- DONE Open those tabs stored in Tab Stash about implementing a bezier pen
	- DONE Work on a system built into the Rust engine that continuously monitors CPU usage from another thread and warns the user if Vecternary uses too much system resources
	- DONE Work making sure the UI thread is separate from the engine thread
	- DONE Limit Vecternary to use no more than 500 MB of RAM or more than 10% of CPU
	- DONE Work on a comprehensive solution to store app performance data on the user's machine (in order to 
		- DONE Flamechart graph (vanilla JS UI component) based on `console.profile[title])` and `console.trace()` to perform app-wide profiling
		- DONE Line graph based on `window.performance` API to calculate speeds and lag on certain functions
		- DONE Standard monitoring (htop-style) with CPU usage, memory usage, and FPS which are all measured from the Rust backend engine
		- DONE Stress tester options (when the developer extras are enabled in the developer menu) in order to perform both benchmark tests on Vecternary and do [performance recordings](https://yonatankra.com/how-to-profile-javascript-performance-in-the-browser/)
		- DONE All the data is kept on the local computer so it cannot be compromised, and will never be transmitted
		- DONE However, the user is recommended from time to time to share the performance logging data (though not required to)
- DONE Make an icon stylesheet so that instead of including complicated markup to embed SVGs directly, I can just use something like `<i class="my-icon" alt="something"></i>`
- DONE Begin cleaning up markup of UI with vanilla javascript UI components based on [[https://jack.ofspades.com/developing-small-javascript-components-without-frameworks/index.html]]
	- DONE These components should also support the transition-enter and transition leave methods as per
	- DONE Make an isolated component for dropdown menus
		- DONE This allows us to only need the menu items markup instead of all of the complex dropdown markup
	- DONE Make an isolated component for the state (mode) buttons
	- DONE Make an isolated component for the sliders (which are already a javascript component but could be simplified)
- DONE Implement saving files and let Rust backend do the heavy work
	- DONE Optimize by incremental loading
		- DONE First, only load parts of the file visible in the canvas
			- DONE Use javascript to tell Rust the size of the canvs
			- DONE Then Rust will separate the .vect file into elements
			- DONE If an element is positioned outside of the canvas, it loads them last
		- DONE If an element contains large pixmaps, they are loaded into memory by rust
			- DONE In that way fabricjs doesn't need to convert the image to base64 then load the image back
			- DONE Instead, fabricjs can directly load the image from memory
		- DONE Second, do the loading asynchronously
		- DONE Third, optimize vectors and bitmaps (SVGO/tinypng style but in rust) before loading
		- DONE Fourth, let rust code handle as much of the loading process as possible
- DONE Implement auto error/warning logging via javascript communication with rust backend
	- DONE Use the `window.onerror` event handler to catch all the errors, with this info:
		- DONE Error name/type
		- DONE Error content
		- DONE Error location (line, column)
		- DONE Stack trace
	- DONE Use Javascript to write this as a JSON object, and pass it to rust
	- DONE Then, use Rust to continuously create an error log and save it to ~/vecternary.log
- DONE Implement auto saving via the "canvas:onmodified" event
- DONE Implement help system:
	- DONE Search through menus feature for vecternary - like macos, it searches through menu items
	- DONE Built-in help which launches another webview for a help UI dashboard - design the help dashboard in Figma, it should be like Onivim's
	- DONE Vecternary command palette feature for keyboard-centric workflow as well as the keyboard shortcuts system

Later:

- DONE Rewrite the code again based on experience
- DONE Include a states-based engine for controlling the UI
- DONE Zooming into canvas/zooming out
- DONE Make the UI completely responsive (currently it is only partially responsive)
- DONE Add drag and dropping of images from file browser